{
  "version": "1.0.0",
  "time": 1591495042634,
  "docs": {
    "main": {
      "name": "메인",
      "docs": {
        "starting": {
          "name": "시작하기",
          "content": "# 시작하기\r\n\r\n안녕하세요. `Koreanbots` 공식 API 문서에 오신 것을 환영합니다.\r\n\r\n이 곳에서 **API**에 관한 모든 것을 알아보세요.\r\n\r\n---\r\n\r\n행운을 빕니다 XD\r\n\r\n\\- KOREANBOTS 관리진 일동 -\r\n\r\n## 도움받기\r\n\r\n질문이 있으신가요? [공식 디스코드](https://discord.com/invite/JEh53MQ) 에서 도와드리죠!\r\n"
        },
        "api": {
          "name": "API",
          "content": "# API\r\n\r\n이곳에서는 API 요청의 기본적인 정보를 안내합니다.\r\n\r\n## Base URL\r\n\r\n모든 API의 기본 URL입니다.\r\n\r\n<div class=\"ui segment\"><div class=\"ui top attached label\">Base URL</div><br/>https://api.koreanbots.dev</div><br/>\r\n\r\n모든 엔드포인트의 요청은 이곳으로 보내게됩니다.\r\n\r\n## 레이트리밋\r\n\r\n<div class=\"ui error message\"> 레이트리밋(RateLimit)은 로그인 토큰 기준이 아닌, IP 기준으로 적용됩니다. <br/> 레이트리밋은 클라이언트와 동일 IP로 접속할 경우 공유하게 됩니다.</div>\r\n\r\n효율적인 리소스 관리를 위해 일정시간의 요청 제한 시간입니다.\r\n\r\n만약 제한된 요청 횟수보다 더 많이 요청할 경우 `429`의 **STATUSCODE**(상태코드)를 반환합니다.\r\n\r\n### 엔드포인트별 레이트리밋\r\n\r\n반환 상태코드가 `200`(SUCCESS)가 아니어도 레이트리밋은 카운트됩니다.\r\n\r\n| ENDPOINT | RATELIMIT |\r\n| -------- | --------- |\r\n| /*       | 120회/분  |\r\n| /bots/servers | 1회/분 |\r\n\r\n#### 레이트리밋 헤더\r\n\r\n| 헤더명 | 설명 |\r\n|-------|------|\r\n| x-ratelimit-limit | 해당 엔드포인트에서 허용되는 요청 횟수입니다. |\r\n| x-ratelimit-remaining | 남은 요청 가능 횟수입니다. |\r\n| x-ratelimit-reset | 횟수 카운트가 리셋되는 시간입니다. |\r\n"
        },
        "sdk": {
          "name": "언어별 SDK",
          "content": "# 언어별 SDK\r\n\r\nAPI 링크로 요청하는 대신, SDK를 사용하시면 더 간편하게 사용하실 수 있습니다.\r\n\r\n## Javascript\r\n\r\n[NPM](https://npmjs.org/koreanbots) [Github](https://github.com/koreanbots/js-sdk)\r\n\r\n## Python\r\n\r\n[PYPI](https://pypi.org/project/koreanbots/) [Github](https://github.com/koreanbots/py-sdk)\r\n\r\n## Cⵌ\r\n\r\n[NUGET](https://www.nuget.org/packages/DBKR-SDK/) [Github](https://github.com/koreanbots/cs-sdk)\r\n"
        }
      }
    },
    "api": {
      "name": "엔드포인트",
      "docs": {
        "bots": {
          "name": "봇 리스트",
          "content": "# 봇 리스트\r\n\r\n모든 봇 리스트의 순위 등 다양한 정보를 불러오는 엔드포인트들입니다.\r\n\r\n<h2><method class=\"get\">GET</method> /bots/get</h2>\r\n\r\n### 쿼리 파라미터\r\n\r\n| QUERYSTRING | 설명 |\r\n|-------------|------|\r\n| page        | 조회할 페이지 번호 |\r\n\r\n### 반환값 (Returns)\r\n\r\n타입: `JSON`\r\n\r\n- `code`: 200\r\n  - 반환값 코드입니다. (`message`를 확인하시면 오류 내용을 보실 수 있습니다.)\r\n- `data`: [Bot](#bot)\r\n  - 반환되는 봇들입니다.\r\n- `totalPage`\r\n  - 전체 페이지 수\r\n- `currentPage`\r\n  - 현재 페이지 번호\r\n\r\n## 타입\r\n\r\n<h3 id=\"bot\">Bot: Object</h3>\r\n\r\n#### Properties\r\n\r\n- `id`: string\r\n  - 봇의 아이디\r\n- `name`: string\r\n  - 봇의 이름\r\n- `servers`: number\r\n  - 봇의 서버 수\r\n- `votes`: number\r\n  - 봇의 투표 수\r\n- `intro`: string\r\n  - 봇의 짧은 설명\r\n- `avatar`: string\r\n  - 봇의 세부 설명\r\n- `url`: string|false\r\n  - 봇의 초대링크\r\n- `category`: [Category](#category)[]\r\n  - 봇의 카테고리\r\n- `tag`: string\r\n  - 봇의 태그\r\n- `state`: ok|archived|private\r\n  - 봇의 공개 상태\r\n  - ok: 공개 | archived: 잠금 | private: 특수목적 봇\r\n- `verified`: boolean\r\n  - 봇의 디스코드 인증 여부\r\n- `trusted`: boolean\r\n  - 봇의 KOREANBOTS 인증 여부\r\n- `boosted`: boolean\r\n  - 봇의 부스트 특전 여부\r\n- `vanity`: string|false\r\n  - 봇의 VANITY URL (해당 항목은 `boosted` 항목이 허용되어있는 경우에만 적용됩니다)\r\n- `banner`: string|false\r\n  - 봇의 배너 링크 (미리보기 배경) (해당 항목은 `boosted` 항목이 허용되어있는 경우에만 적용됩니다)\r\n- `bg`: string|false\r\n  - 봇의 배경 링크 (세부설명 배경) (해당 항목은 `boosted` 항목이 허용되어있는 경우에만 적용됩니다)\r\n\r\n<h3 id=\"category\">Category: Enum</h3>\r\n\r\n- `관리`\r\n- `뮤직`\r\n- `전적`\r\n- `웹 대시보드`\r\n- `로깅`\r\n- `도박`\r\n- `게임`\r\n- `밈`\r\n- `레벨링`\r\n- `유틸리티`\r\n- `번역`\r\n- `대화`\r\n- `NSFW`\r\n- `검색`"
        },
        "mybot": {
          "name": "자신의 봇",
          "content": "# 자신의 봇\r\n\r\n자신의 봇의 정보를 업데이트하거나 불러오는 엔드포인트들입니다.\r\n\r\n<h2><method class=\"post\">POST</method> /bots/servers</h2>\r\n\r\n### 요청 헤더\r\n\r\n| 헤더 | 값 |\r\n| ----| ---|\r\n| Content-Type | application/json |\r\n| token        | KOREANBOTS 토큰  |\r\n\r\n### Body (JSON)\r\n\r\n- `servers`\r\n  - 봇의 서버 수\r\n\r\n### 반환값 (Returns)\r\n\r\n타입: `JSON`\r\n\r\n- `code`: 200 | 400 | 403 | 401\r\n  - 반환값 코드입니다. (`message`를 확인하시면 오류 내용을 보실 수 있습니다.)\r\n- `message?`: string | Object\r\n  - 오류 메세지입니다.\r\n\r\n<h2><method class=\"get\">GET</method> /bots/voted/:id</h2>\r\n\r\n### 매개변수\r\n\r\n| PARAM | 설명 |\r\n| ------| -----|\r\n| id    | 확인할 유저 ID |\r\n\r\n### 요청 헤더\r\n\r\n| 헤더 | 값 |\r\n| ----| ---|\r\n| token        | KOREANBOTS 토큰  |\r\n\r\n### 반환값 (Returns)\r\n\r\n타입: `JSON`\r\n\r\n- `code`: 200 | 400\r\n  - 반환값 코드입니다. (`message`를 확인하시면 오류 내용을 보실 수 있습니다.)\r\n- `voted?`: boolean\r\n  - 투표 여부\r\n- `message?`: string | Object\r\n  - 오류 메세지입니다.\r\n"
        }
      }
    },
    "topic": {
      "name": "예시",
      "docs": {
        "checkingVote": {
          "name": "유저 투표 여부 확인하기",
          "content": "# 유저 투표 여부 확인하기\r\n\r\n해당 페이지에서는 유저의 투표 여부를 확인하는 코드를 포함하고 있습니다.\r\n\r\n## Javascript\r\n\r\n```js\r\nconst fetch = require('node-fetch')\r\nconst BASEURL = 'https://api.koreanbots.dev'\r\nconst token = 'KOREANBOTS 토큰'\r\nconst userID = 'ID'\r\n\r\nfetch(BASEURL + '/bots/voted/' + userID, { headers: { token } })\r\n.then(r=> r.json()).then(r=> console.log(r))\r\n.catch(e=> console.error(e))\r\n```\r\n\r\n## Cⵌ\r\n\r\n```cs\r\nUri BASEURL = new Uri(\"https://api.koreanbots.dev\");\r\nstring token = \"KOREANBOTS 토큰\";\r\nulong userID = ulong.Parse(\"ID\");\r\n\r\nRestClient Client = new RestClient(BASEURL);\r\nRestRequest Request = new RestRequest(Method.GET, $\"/bots/voted/{userID}\");\r\nRequest.AddHeader(\"token\", token);\r\nvar res = Client.Execute(Request);\r\nConsole.WriteLine(res.Content);\r\n```\r\n\r\n## Python3\r\n\r\n```py\r\nfrom requests import get\r\nBASEURL = \"https://api.koreanbots.dev\"\r\ntoken = \"KOREANBOTS 토큰\"\r\nuserID = 'ID' # int or str\r\n\r\nresponse = get(f'{BASEURL}/bots/voted/{userID}', headers={\"token\":token})\r\nprint(response.json())\r\n```\r\n"
        },
        "updateServer": {
          "name": "봇 서버 수 업데이트하기",
          "content": "# 봇 서버 수 업데이트하기\r\n\r\n해당 페이지에서는 봇의 서버 수를 확인하는 코드를 포함하고 있습니다.\r\n\r\n## Javascript\r\n\r\n```js\r\nconst fetch = require('node-fetch')\r\nconst BASEURL = 'https://api.koreanbots.dev'\r\nconst token = 'KOREANBOTS 토큰'\r\nconst serverCount = 100 // 서버 수\r\n\r\nfetch(BASEURL + '/bots/servers', { method: 'POST', headers: { token, 'Content-Type': 'application/json' }, body: JSON.stringify({ servers: serverCount }) })\r\n.then(r=> console.log(r.json())\r\n.catch(e=> console.error(e))\r\n```\r\n\r\n## Cⵌ\r\n\r\n```cs\r\nUri BASEURL = new Uri(\"https://api.koreanbots.dev\");\r\nstring token = \"KOREANBOTS 토큰\";\r\nint ServerCount = 100;\r\n\r\nRestClient Client = new RestClient(BASEURL);\r\nRestRequest Request = new RestRequest(Method.POST, \"/bots/servers\");\r\nrequest.AddHeader(\"token\", token);\r\nrequest.AddBody(new {servers=ServerCount});\r\nclient.Execute(request);\r\n```\r\n\r\n## Python3\r\n\r\n```py\r\nfrom requests import post\r\nBASEURL = \"https://api.koreanbots.dev\"\r\ntoken = \"KOREANBOTS 토큰\"\r\nserverCount = 100 # 서버 수\r\n\r\nresponse = post(f'{BASEURL}/bots/servers', headers={\"token\":token, \"Content-Type\": \"application/json\"}, data={\"servers\": serverCount})\r\nprint(response.json())\r\n```\r\n"
        }
      }
    }
  }
}
